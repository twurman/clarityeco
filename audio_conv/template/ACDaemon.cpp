// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AudioService.h"
#include "audio_conv.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class AudioServiceHandler : virtual public AudioServiceIf {
 public:
  AudioServiceHandler() {
    // Your initialization goes here
  }

  void audio_conversion(std::string& _return, const std::string& audio) {
    // Your implementation goes here
    Audio_Service test;
    _return = test.conversion(audio);
    printf("audio_conversion\n");
  }

};

int main(int argc, char **argv) {
  //Creating a Server port
  int server_port = 9090;
  if(argc == 2){
     server_port = atoi(argv[1]);
     std::cout<< "Using port "<<server_port<<" for audio conversion"<<std::endl;
  }  
  else{
    std::cout<< "Using default port "<<server_port<<" for audio conversion"<<std::endl;
  }
  shared_ptr<AudioServiceHandler> handler(new AudioServiceHandler());
  shared_ptr<TProcessor> processor(new AudioServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(server_port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

