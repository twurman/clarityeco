// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AudioService.h"
#include "audio_conv.h"
#include "CommandCenter.h"

#include <stdio.h>
#include <iostream>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string>
#include <fstream>
#include <sstream>
#include <cstdlib> //07-12-15 for arg passing



#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
//#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>      

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class AudioServiceHandler : virtual public AudioServiceIf {
 public:
  AudioServiceHandler() {
    // Your initialization goes here
  }

  void audio_conversion(std::string& _return, const std::string& audio) {
    // Your implementation goes here


    Audio_Service test;
    _return = test.conversion(audio);
    printf("audio_conversion\n");
  }

};

int main(int argc, char **argv) {
  int port = 9094;
  int cmdcenterport = 8081;

  if (argc==2) {
    port =atoi(argv[1]);
  }
  else if(argc==3){
    port = atoi(argv[1]);
    cmdcenterport = atoi(argv[2]);
  }
  else{
    std::cout << "Using default port for asr..." << std::endl;
    std::cout << "Using default port for cc..." << std::endl;
  }

  //Register with the command center
  boost::shared_ptr<TTransport> cmdsocket(new TSocket("localhost", cmdcenterport));
  boost::shared_ptr<TTransport> cmdtransport(new TBufferedTransport (cmdsocket));
  boost::shared_ptr<TProtocol> cmdprotocol(new TBinaryProtocol(cmdtransport));
  cmdcenterstubs::CommandCenterClient cmdclient(cmdprotocol);
  cmdtransport->open();
  std::cout << "Registering automatic speech recognition server with command center..." << std::endl;

  cmdcenterstubs::MachineData mDataObj;
  mDataObj.name="localhost";
  mDataObj.port=port;
  cmdclient.registerService("AUDIO", mDataObj);
  cmdtransport->close();

  shared_ptr<AudioServiceHandler> handler(new AudioServiceHandler());
  shared_ptr<TProcessor> processor(new AudioServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  std::cout << "Starting the audio conversion service server on port " << port << "..." << std::endl;
  server.serve();
  return 0;
}

